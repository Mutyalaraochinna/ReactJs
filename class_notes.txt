=> Introduction

=> Environmental Setup

=> Components in ReactJS

        1) functional level component

        2) class level component

=> communication between components

        1) state

        2) props

=> Rest API Calls

    => axios module

=> State Management

    1) redux

    2) saga

    3) thunk


=> ECommerce Application


=> Forms with Validations

=> Higher Order Components

        ---
        ---
        ---

                                Introduction
                                ============
        - React is the JavaScript library.

        - React given by facebook.

        - React Categorized into 3 flavours.

                        1) ReactJS

                        2) React Native

                        3) React BootStrap

        - ReactJS, used to develop the web applications.

        - web applications we can develop in "two ways".

                1) JSX

                2) TypeScript

        - JSX stands for JavaScript + XML.

        - JSX won't follows the OOPS.

        - TypeScript is the Programming Language.

        - TypeScript follows the OOPS Features.

        - React Native, used to develop the mobile applications.

        - React BootStrap, used to apply the Rich UI to Both Web Applications and Mobile Applications.

Environmental Setup
===================

1) download and install NodeJS

        - npm is the tool, used to install the ReactJS.

        - npm stands for Node Packaging Manager.

        - npm present in NodeJS.

2) install "create-react-app" tool

        - create-react-app is the tool used to create the ReactJS Applications.

        - we will install create-react-app tool by using following command.

                > npm install -g create-react-app

        - "-g" stands for global installation

3) install Visual Studio Code.

        "VSCode" is the IDE, provided by Microsoft.

        "VSCode" IDE, Recomended IDE to Develop ReactJS Applications.


4) install yarn tool.

        > npm install -g yarn

Create and Execute the First React Application
==============================================

1) create the react application

        > npx create-react-app first-app --template typescript

        - npx stands for node packaging runner.

        - npx present in NodeJS.


2) switch to react application

        > cd first-app

3) execute the react application

        > yarn start

        - default port number of react application is 3000.


Component
=========
        - Reusable Portion of complex UI Called as component.

        - These Components are "Reusable".

        - As a React Developer, we can Provide Communbication Between Components.

        - React Applications are Component Based Applications.

        - In React, we can create two types of Components.

                1) class level components

                2) functional level components

        - class level components also called as stateful components.

        - functional level components also called as stateless components.

> npx create-react-app components-app --template typescript

> cd components-app

***************************************
components-app
             src
               First.tsx

               index.tsx
             public
                index.html
****************************************


props
=====
        - props is the predefined object.

        - props used to receive the data from another component.

**************************************
7am-apps
       src  
            First.tsx

            Second.tsx

            index.tsx
**************************************

                                        Rest API Examples
                                        =================

    - axios is the 3rd party library, used to make the rest api calls.

    - axios library we will download by using "yarn" tool.

step 1.
    create the react project

    > npx create-react-app rest-ex --tempate typescript

step 2.
    switch to react application

    > cd rest-ex

step 3.
    download the axios library

    > yarn add axios --save

step 4.
    create the modal

    //https://www.w3schools.com/angular/customers.php


    ****************************************
    rest-ex
          src
            modal
              Customers.tsx
    ****************************************

    finally "Customers" and "Customer" modal are ready.

step 5.
    create the component

    *****************************************
    rest-ex
         src
           RestEx.tsx
    *****************************************


                                        **** MERN STACK DEVELOPMENT ****
        M - MongoDB

        E - ExpressJS

        R - ReactJS

        N - NodeJS

        we are using "ReactJS" as Front End.

        we will use "NodeJS" as Backend.

        we will use "MongoDB" as DataBase.

        we will use "ExpressJS" to develop Rest Services.

        GET

        POST

        PUT

        DELETE

        ---
        ---
        ---

MongoDB
-------
    - MongoDB is NoSQL DataBase (Won't Supports Either SQL or PLSQL).

    - MongoDB Supports the "JSON".

    - MongoDB DataBase is "Light Weight" DataBase.

Terminology
===========
                        SQL                                 NoSQL


    - Support Both SQL & PLSQL                      Wont Supports SQL or PLSQL.

    - MySQL, SQLServer,Oracle,...                   MongoDB

    - Won't Supports JSON                           Supports JSON.

    - Tables                                        Collection

    - DataBase                                      DataBase

    - Rows                                          Records

    - Primary Key                                   _id


    - MongoDB DataBase provides cloud support.

                URL : https://account.mongodb.com/account/login











implementation of MERN Stack application
========================================
1) deploy images to s3 bucket

    P1_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p1.jpg

    P2_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p2.jpg

    P3_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p3.jpg

    P4_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p4.jpg

    P5_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p5.jpg

    P6_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p6.jpg


2) create the database in mongodb.


        DataBase Details:
        =================

        mongodb+srv://admin:admin@rjs-05.1glav.mongodb.net/MERN?retryWrites=true&w=majority
        mongodb+srv://admin:admin@cluster0.3sghp.mongodb.net/MERN?retryWrites=true&w=majority

        uname : admin

        password : admin

        database : MERN

        collection : products


3) create the Node Server

    - "Node Server" is used to create the "Rest" API'S with the help of "ExpressJS".

    - we will develop Node application with the help of "JavaScript".

    - Node Supports the libraries.


=> mongodb

    - used to connect to "mongodb" database.


=> express

    - used to develop the "Rest" Services.

    Ex.
        GET
        POST
        PUT
        DELETE
        ---
        ---
        ---

=> body-parser

    - body-parser used to receive the data from Frontend.


=> cors

    - used to enable the "cors" policy.


    we will download above libraries with the help of "yarn" tool

    above libraries downloads to "node_modules" folder in current path.

step 1.
    create the folder

    Ex.
        server

step 2.
    switch to server folder

    > cd server



step 3.
    download the libraries.

    @mongodb

    @express

    @body-parser

    @cors

    > yarn mongodb express body-parser cors --save

                or

    > npm install mongodb express body-parser cors --save

Note : all the libraries downloads to "node_modules" folder in current path

step 4.
    create the server file

    server.js

step 5.
    start the node server


    > node server


step 6.
    test the rest api by using "Postman".


   http://localhost:8080/products    (GET)


step 7.
    create the react application

    > npx create-react-app mern-app --template typescript

step 8.
    switch to react application

    > cd mern-app


step 9.
    download axios module

    => axios module used to make the rest api calls.

    => we will download axios module with the help of either yarn tool or npm tool.

    > yarn add axios --save


step 10.
    create the component

    ************************************
    mern-app
           src
             Products.tsx

             index.tsx

            public
              index.html
    **************************************

spa-demo2
 src
  App.tsx
   Screens
    screen1.tsx
    screen2.tsx
index.tsx